PHILOSOPHY

Shell script programming has a bad rep among the admins. Can sum into two reasons:
	1) Speed. Have the velocity equivalent to an execution of an interpreted language.
	Comparing to C or even an interpreted language like Perl.

	2) Even though it is easy to write a simple batch-job like shell scripts, there are a lot 
	of poor quality, prone to be bad shell scripts. LACK OF GOOD, CLEAN, CLEAR, and REFINED SCRIPTS.

WHY is due to there are some certain criteria that exists on writing good shell scripts.
For eg: In CGI, Speed of perl >>> shell (but C >>> Shell and Perl). The factors writing a good on are,

	1) a clear and readable layout (!important)
	2) avoiding unneccessary commands

A clear layout is easily maintainted and understood >>> vs A messy blackmagic like nightmare.
Might think that a simple script is bearable and not much of a problem but,
	1) a simple script is,
	- more often than anticipated, 
	- grow into a large, complex one.
	2) if others don't understand how it works, you the one whos gonna stick with that for life.

INDENTATION MATTERS! where there are main control structures are likely to get placed, such as
if/then/else and loops. Indentation is critical to understand what all the fuxzz is about.

ONE MAJOR DRAWBACK/WEAKNESS is "Lines". Such as,

> cat /tmp/myfile | grep "str"

which would run much faster, if

> grep "str" /dir/file


#THIS MAY SEEM LIKE MUCH, BUT!! 

# 1) the OS has to load up the /bin/grep executable, which is a reasonably small 75600 bytes on my
# system, 

# 2) open a pipe in memory for the transfer, load and run the /bin/cat executable, 
# which is an even smaller 9528 bytes on my system, attach it to the input of the pipe, 
# & let it run.


# simply, the structure says it all. will decode what the fuzz is all about~
# 1)	> cat /tmp/myfile | grep "str"

# means, 
	1) the cat has to get executed from usr/bin/cat to concatenate
	2) after poking the function,  the function has to HEAD towards to the directory that we give
	3) then again /usr/bin/grep has to be poked and string attached to surf
which takes 75600byes of processing power

# 2) 	> grep "str" /dir/file
	1) one step, grep with get executed from /usr/bin/grep 
	2) strings attached
	3) dir HEADed, done!

takes the heavy lifting first, then it goes around.
but previously, to and fro took place in multiples.

MUNDANE JOBS ARE OKAY! 
Of course, this kind of thing is what the OS is there for, 
and it's normally pretty efficient at doing it.
=> PROCESS AND MEMORY OPTIMIZATION.

BUT,
if this command were in a loop being run many times over, 
the saving of not locating and loading the cat executable, 
setting up and releasing the pipe, can make some difference, especially in, say, 

a CGI environment where there are enough other factors to slow things down without the script
itself being too much of a hurdle. 
Some Unices are more efficient than others at what they call "building up and tearing 
down processes" 
- i.e., loading them up, executing them, and clearing them away again.
But however good your flavour of Unix is at doing this, it'd rather not have to do it at all.

As a result of this, you may hear mention of the Useless Use of Cat Award (UUoC), a
lso known in some circles as 
The Award For The Most Gratuitous Use Of The Word Cat In A Serious Shell Script 
being bandied about on the comp.unix.shell newsgroup from time to time. 

This is purely a way of peers keeping each other in check, 
and making sure that things are done right.

Which leads me nicely on to something else: 
	- Don't ever feel too close to your own shell scripts; 
	by their nature, the source cannot be closed. 

	- If you supply a customer with a shell script, s/he can inspect it quite easily. 
	So you might as well accept that it will be inspected by anyone you pass it to; 
	use this to your advantage with the GPL 

